// Code generated by MockGen. DO NOT EDIT.
// Source: D:/golang/src/telkomsel/ticket/ticket-management-service/internal/usecase/ticket_usecase.go
//
// Generated by this command:
//
//	mockgen -source=D:/golang/src/telkomsel/ticket/ticket-management-service/internal/usecase/ticket_usecase.go -destination=D:/golang/src/telkomsel/ticket/ticket-management-service/mock/internal/usecase/ticket_usecase_mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/SyamSolution/ticket-management-service/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTicketExecutor is a mock of TicketExecutor interface.
type MockTicketExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockTicketExecutorMockRecorder
}

// MockTicketExecutorMockRecorder is the mock recorder for MockTicketExecutor.
type MockTicketExecutorMockRecorder struct {
	mock *MockTicketExecutor
}

// NewMockTicketExecutor creates a new mock instance.
func NewMockTicketExecutor(ctrl *gomock.Controller) *MockTicketExecutor {
	mock := &MockTicketExecutor{ctrl: ctrl}
	mock.recorder = &MockTicketExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketExecutor) EXPECT() *MockTicketExecutorMockRecorder {
	return m.recorder
}

// GetAvailableTicketByContinent mocks base method.
func (m *MockTicketExecutor) GetAvailableTicketByContinent(continent string) ([]model.TicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableTicketByContinent", continent)
	ret0, _ := ret[0].([]model.TicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableTicketByContinent indicates an expected call of GetAvailableTicketByContinent.
func (mr *MockTicketExecutorMockRecorder) GetAvailableTicketByContinent(continent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableTicketByContinent", reflect.TypeOf((*MockTicketExecutor)(nil).GetAvailableTicketByContinent), continent)
}

// GetAvailableTicketByType mocks base method.
func (m *MockTicketExecutor) GetAvailableTicketByType(ticketType string) ([]model.TicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableTicketByType", ticketType)
	ret0, _ := ret[0].([]model.TicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableTicketByType indicates an expected call of GetAvailableTicketByType.
func (mr *MockTicketExecutorMockRecorder) GetAvailableTicketByType(ticketType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableTicketByType", reflect.TypeOf((*MockTicketExecutor)(nil).GetAvailableTicketByType), ticketType)
}

// GetStockTicketGroupByContinent mocks base method.
func (m *MockTicketExecutor) GetStockTicketGroupByContinent() ([]model.StockTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockTicketGroupByContinent")
	ret0, _ := ret[0].([]model.StockTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockTicketGroupByContinent indicates an expected call of GetStockTicketGroupByContinent.
func (mr *MockTicketExecutorMockRecorder) GetStockTicketGroupByContinent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockTicketGroupByContinent", reflect.TypeOf((*MockTicketExecutor)(nil).GetStockTicketGroupByContinent))
}

// GetTicketByContinent mocks base method.
func (m *MockTicketExecutor) GetTicketByContinent(continent string) ([]model.TicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByContinent", continent)
	ret0, _ := ret[0].([]model.TicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByContinent indicates an expected call of GetTicketByContinent.
func (mr *MockTicketExecutorMockRecorder) GetTicketByContinent(continent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByContinent", reflect.TypeOf((*MockTicketExecutor)(nil).GetTicketByContinent), continent)
}

// GetTicketEventByTicketID mocks base method.
func (m *MockTicketExecutor) GetTicketEventByTicketID(TicketID int) (model.TicketEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketEventByTicketID", TicketID)
	ret0, _ := ret[0].(model.TicketEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketEventByTicketID indicates an expected call of GetTicketEventByTicketID.
func (mr *MockTicketExecutorMockRecorder) GetTicketEventByTicketID(TicketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketEventByTicketID", reflect.TypeOf((*MockTicketExecutor)(nil).GetTicketEventByTicketID), TicketID)
}

// UpdateStockTicket mocks base method.
func (m *MockTicketExecutor) UpdateStockTicket(ticketID, order int, typeStock string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStockTicket", ticketID, order, typeStock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStockTicket indicates an expected call of UpdateStockTicket.
func (mr *MockTicketExecutorMockRecorder) UpdateStockTicket(ticketID, order, typeStock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStockTicket", reflect.TypeOf((*MockTicketExecutor)(nil).UpdateStockTicket), ticketID, order, typeStock)
}
